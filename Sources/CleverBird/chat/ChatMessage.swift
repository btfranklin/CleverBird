//  Created by B.T. Franklin on 5/5/23

import Foundation

public struct ChatMessage: Codable, Identifiable {

    public enum Role: String, Codable {
        case system
        case user
        case assistant
        case function
    }

    enum CodingKeys: String, CodingKey {
        case role
        case content
        case functionCall
        case name
    }

    public var id: String

    /// The role of the message's author
    public let role: Role

    /// The contents of the message. `content` is required for all messages except assistant messages with function calls.
    public let content: String?

    /// The name and arguments of a function that should be called, as generated by the model.
    public let functionCall: FunctionCall?

    /// The `name` of the author of this message. `name` is required if `role` is `function`, and it should be the name of the function whose response is in the `content`.
    public let name: String?

    public init(role: Role,
                content: String? = nil,
                id: String? = nil,
                functionCall: FunctionCall? = nil) throws {

        // Validation: Name is required if role is function, and it should be the name of the function whose response is in the content.
        if role == .function {
            guard let functionCall = functionCall, let content = content, content.contains(functionCall.name) else {
                throw CleverBirdError.invalidFunctionMessage
            }
        }

        // Validation: Content is required for all messages except assistant messages with function calls.
        if content == nil && !(role == .assistant && functionCall != nil) {
            throw CleverBirdError.invalidMessageContent
        }

        self.role = role
        self.content = content
        self.functionCall = functionCall
        self.name = functionCall?.name

        if let id = id {
            self.id = id
        } else {
            var hasher = Hasher()
            hasher.combine(self.role)
            hasher.combine(self.content ?? "")
            let hashValue = abs(hasher.finalize())
            let timestamp = Int(Date.now.timeIntervalSince1970*10000)

            self.id = "chatmsg-\(hashValue)-\(timestamp)"
        }
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.role = try container.decode(Role.self, forKey: .role)
        self.content = try container.decodeIfPresent(String.self, forKey: .content)
        self.functionCall = try container.decodeIfPresent(FunctionCall.self, forKey: .functionCall)
        self.name = try container.decodeIfPresent(String.self, forKey: .name)
        self.id = "pending"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(self.role, forKey: .role)
        try container.encodeIfPresent(self.content, forKey: .content)
        try container.encodeIfPresent(self.functionCall, forKey: .functionCall)
        try container.encodeIfPresent(self.name, forKey: .name)
    }
}

extension ChatMessage: Equatable {
    public static func == (lhs: ChatMessage, rhs: ChatMessage) -> Bool {
        return lhs.id == rhs.id
            && lhs.role == rhs.role
            && lhs.content == rhs.content
    }
}
